package tank;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

public class GameCore extends JPanel implements KeyListener, MouseListener {

    Background bg;
    Player player1;
    Enemy player2;
    Bonus bonus1,bonus2,bonus3;
    public Vector<PBullet> pbullets = new Vector<PBullet>();
    public Vector<EBullet> ebullets = new Vector<EBullet>();
    public Vector<WallB> wall = new Vector<WallB>();
    public Vector<Bang> bangs = new Vector<Bang>();
    public Vector<Bang> bang = new Vector<Bang>();
    public boolean isFire = false;
    public boolean isShoot = false;
  public boolean isStop = false;
  
  Image img;
  int x, y,wd,h, speed;
  double ang,ang2;
  Rectangle m,n,p,q,r,s,b,B;
  WallUB w1,w2,w3,w4;
  WallB wb;
  public String info1 = "", info2 = "";
  public int score1,score2;

  public GameCore() throws IOException {
    bg = new Background();
        player1 = new Player(img, x, y);
        player2 = new Enemy(img, x, y);
        w1 = new WallUB(img, x, y);
        w2 = new WallUB(img, x, y);
        w3 = new WallUB(img, x, y);
        w4 = new WallUB(img, x, y);
        wb = new WallB(img,x,y);
        bonus1 = new Bonus(img,x,y);
        bonus2 = new Bonus(img,x,y);
        bonus3 = new Bonus(img,x,y);
        player1.setX(130);
        player1.setY(120);
        player2.setX(500);
        player2.setY(510);
        player1.setWidth(64);
        player1.setHeight(64);
        player2.setWidth(64);
        player2.setHeight(64);
        bonus1.setX(200); bonus1.setY(200); bonus1.setWidth(28); bonus1.setHeight(28);
        bonus2.setX(400); bonus2.setY(400); bonus2.setWidth(28); bonus2.setHeight(28);
        bonus3.setX(300); bonus3.setY(300); bonus3.setWidth(28); bonus3.setHeight(28);
        
        w1.setX(0);w1.setY(0); w1.setWidth(32); w1.setHeight(720);
        w2.setX(0);w2.setY(0); w2.setWidth(35); w2.setHeight(720);
        w3.setX(0);w3.setY(0);w3.setWidth(720); w3.setHeight(32);
        w1.setX(0);w1.setY(660);w4.setWidth(720); w4.setHeight(32);
        for(int i=0;i<wall.size();i++){
            wall.setElementAt(wb, i);
        }
        wall.add(wb); wall.add(wb); wall.add(wb); wall.add(wb); wall.add(wb);wall.add(wb);wall.add(wb);wall.add(wb);wall.add(wb);
        wall.elementAt(0).setX(200);
        wall.elementAt(0).setY(300);
        wall.elementAt(0).setWidth(32);
        wall.elementAt(0).setHeight(32);
        B = new Rectangle(wall.elementAt(0).getX(),wall.elementAt(0).getY(),wall.elementAt(0).getWidth(),wall.elementAt(0).getHeight());
        p = new Rectangle(bonus1.getX(),bonus1.getY(),bonus1.getWidth(),bonus1.getHeight());
        q = new Rectangle(bonus2.getX(),bonus2.getY(),bonus2.getWidth(),bonus2.getHeight());
        r = new Rectangle(bonus3.getX(),bonus3.getY(),bonus3.getWidth(),bonus3.getHeight());
        this.addKeyListener(this);
        this.addMouseListener(this);
  }
BufferedImage bimg,bp,bc;
Image ig,i1,i2,i3,i4,i5,i6;

  public void paint(Graphics g) {

            Dimension windowSize = getSize();
         
            if(bimg==null){
            bimg = (BufferedImage) createImage(windowSize.width, 
                    windowSize.height);
            g = bimg.createGraphics();
            
            }
            drawDemo(g);
            
            if(player1.getX()>30&&player1.getY()>30&&player1.getX()<=600&&player1.getY()<=600){
               
               bp =  bimg.getSubimage(player1.getX()-30, player1.getY()-30, 200, 200);
               i4 = bp.getScaledInstance(350, 690, BufferedImage.SCALE_DEFAULT);
                g.drawImage(i4, 0, 0, this); }
            
                else if(player1.getX()<30||player1.getY()<30){
               
               bp =  bimg.getSubimage(player1.getX(), player1.getY(), 200, 200);
               i5 = bp.getScaledInstance(350, 690, BufferedImage.SCALE_DEFAULT);
                g.drawImage(i5, 0, 0, this); } 
            
                else if(player1.getX()<700||player1.getY()<700){
               
               bp =  bimg.getSubimage(player1.getX(), player1.getY(), 30, 30);
               i6 = bp.getScaledInstance(350, 690, BufferedImage.SCALE_DEFAULT);
                g.drawImage(i6, 0, 0, this); } 
            
               if(player2.getX()>30&&player2.getY()>30&&player2.getX()<=600&&player2.getY()<=600){
               
               bp =  bimg.getSubimage(player2.getX()-30, player2.getY()-30, 200, 200);
               i1 = bp.getScaledInstance(350, 690, BufferedImage.SCALE_DEFAULT);
                g.drawImage(i1, 380, 0, this); }
               else if(player2.getX()<30||player2.getY()<30){
               
               bp =  bimg.getSubimage(player2.getX(), player2.getY(), 200, 200);
               i2 = bp.getScaledInstance(350, 690, BufferedImage.SCALE_DEFAULT);
                g.drawImage(i2, 380, 0, this); } 
               
               else if(player2.getX()<700||player2.getY()<700){
               
               bp =  bimg.getSubimage(player2.getX(), player2.getY(), 30, 30);
               i3 = bp.getScaledInstance(350, 690, BufferedImage.SCALE_DEFAULT);
                g.drawImage(i3, 380, 0, this); } 
               
        ig = bimg.getScaledInstance(240, 240, Image.SCALE_SMOOTH);
        g.drawImage(ig, 250, 460, this);
                  
        if(bimg!=null){
            bimg = (BufferedImage) createImage(windowSize.width, 
                    windowSize.height);
            g = bimg.createGraphics();
            
            }
            drawDemo(g);
//                      bp =  bimg.getSubimage(player2.getX()-40, player2.getY()-40, 200, 200);
    //    g.drawImage(bp, 300, 300, this);
        ig = bimg.getScaledInstance(240, 240, Image.SCALE_SMOOTH);
    //    g.drawImage(ig, 300, 300, this);
        
        
  }
  
 
  Graphics g;
  void drawDemo(Graphics g){
      super.paint(g);
        bg.draw(g);
        player1.draw(g);
        player2.draw(g);
        w1.draw(g);
        w2.draw2(g);
        w3.draw3(g);
        w4.draw4(g);
        drawInfo(g);
        bonus1.draw(g);
        bonus2.draw(g);
        bonus3.draw(g);
        for (int i = 0; i < wall.size(); i++) {
            wall.elementAt(i).setPanel(this);
            wall.elementAt(i).draw(g);

        } 
    for (int i = 0; i < pbullets.size(); i++) { //Paint Bullets
      if (!pbullets.elementAt(i).isUsed()) {
        pbullets.elementAt(i).setPanel(this);
        pbullets.elementAt(i).draw(g);
      }
    }
    for (int i = 0; i < ebullets.size(); i++) { //Paint Bullets
      if (!ebullets.elementAt(i).isUsed()) {
        ebullets.elementAt(i).setPanel(this);
        ebullets.elementAt(i).draw(g);
      }
    }
    for (int i = 0; i < bangs.size(); i++) {
      bangs.elementAt(i).setPanel(this);
      bangs.elementAt(i).draw(g);
    }
    for (int i = 0; i < bang.size(); i++) {
      bang.elementAt(i).setPanel(this);
      bang.elementAt(i).draw2(g);
    }

  }
 

  public void StartRun() {
    new Thread() {
      public void run() {
        int counter = 0;
        while (true) {
          while (true && !isStop) { // judge if pause
          
              
            m = new Rectangle(player1.getX(),player1.getY(),player1.getWidth(),player1.getHeight());
            n = new Rectangle(player2.getX(),player2.getY(),player2.getWidth(),player2.getHeight());

            r = new Rectangle(w3.getX(),w3.getY(),w3.getWidth(),w3.getHeight());
            s = new Rectangle(w4.getX(),w4.getY(),w4.getWidth(),w4.getHeight());
            
            if(!(m.intersects(n))&&!(m.intersects(B))&&!(m.intersects(p))&&!(m.intersects(q))&&!(m.intersects(r))&&player1.getX()>=30&&player1.getX()<=650&&player1.getY()>=30&&player1.getY()<=630){   
                    player1.move(); 
                } else  player1.rollback();
           
            
            
           if(!(n.intersects(m))&&!(n.intersects(B))&&!(n.intersects(p))&&!(n.intersects(q))&&!(n.intersects(r))&&player2.getX()>=30&&player2.getX()<=650&&player2.getY()>=30&&player2.getY()<=630){   
                    player2.move(); 
                } else  player2.rollback();
           
            ang = player1.getAngle();
            ang2 = player2.getAngle();
              if (isFire && counter % 25 == 0) {
                try {
                    PBullet[] bs = player1.shot();
                    
                    for (int i = 0; i < bs.length; i++) {
                        pbullets.add((PBullet) bs[i]);
                            Play.playShot();
                    } } catch (IOException ex) {
                    Logger.getLogger(GameCore.class.getName()).log(Level.SEVERE, null, ex);
                }
              
            }
              
              if (isShoot && counter % 25 == 0) {
                try {
                    EBullet[] bst = player2.shot();
                    
                    for (int i = 0; i < bst.length; i++) {
                        ebullets.add((EBullet) bst[i]);
                            Play.playShot();
                    } } catch (IOException ex) {
                    Logger.getLogger(GameCore.class.getName()).log(Level.SEVERE, null, ex);
                }
              
            }
              PBulletMove();
              EBulletMove();
              CheckLife();
              RemoveBang();
              
            try {
              Thread.sleep(30);
            } catch (InterruptedException e) {
              e.printStackTrace();
            }
            repaint();
          }
        }
      }
    }.start();
  }

  @Override
  public void keyPressed(KeyEvent e) {
    int keycode = e.getKeyCode();
    switch (keycode) {
    case KeyEvent.VK_UP:
      Player.up = true;
      break;
    case KeyEvent.VK_W:
      Enemy.high = true;
      break;
    case KeyEvent.VK_LEFT:
      Player.left = true;
      break;
    case KeyEvent.VK_S:
      Enemy.low = true;
      break;
    case KeyEvent.VK_RIGHT:
      Player.right = true;
      break;
    case KeyEvent.VK_D:
      Enemy.rside = true;
      break;
    case KeyEvent.VK_DOWN:
      Player.down = true;
      break;
    case KeyEvent.VK_A:
      Enemy.lside = true;
      break;
    case KeyEvent.VK_SPACE:
      isFire = true;
      break;
    case KeyEvent.VK_X:
      isShoot = true;
      break;
    default:
      break;
    }
  }

  @Override
  public void keyReleased(KeyEvent e) {

    int keycode = e.getKeyCode();
    switch (keycode) {
    case KeyEvent.VK_UP:
      Player.up = false;
      break;
    case KeyEvent.VK_W:
      Enemy.high = false;
      break;
    case KeyEvent.VK_LEFT:
      Player.left = false;
      break;
    case KeyEvent.VK_S:
      Enemy.low = false;
      break;
    case KeyEvent.VK_RIGHT:
      Player.right = false;
      break;
    case KeyEvent.VK_D:
      Enemy.rside = false;
      break;
    case KeyEvent.VK_DOWN:
      Player.down = false;
      break;
    case KeyEvent.VK_A:
      Enemy.lside = false;
      break;
    case KeyEvent.VK_SPACE:
      isFire = false;
      break;
    case KeyEvent.VK_X:
      isShoot = false;
      break;
    default:
      break;
    }
  }
  
  @Override
  public void keyTyped(KeyEvent e) {

  }

  public void PBulletMove() {
      
    for (int i = 0; i < pbullets.size();i++) {
            pbullets.elementAt(i).moveF(ang);

            if (Check.C1(pbullets.elementAt(i), wall.elementAt(0))
            && !pbullets.elementAt(i).isUsed()) {
                Bang ba = new Bang();
                ba.setX(pbullets.elementAt(i).getX());
                ba.setY(pbullets.elementAt(i).getY());
                bang.add(ba);
          pbullets.elementAt(i).setUsed(true);
          Play.playBang();
            wall.elementAt(0).setX(-50);
            B.setLocation(-50, y);
            }
            
            else if (Check.C2(pbullets.elementAt(i), player2)
            && !pbullets.elementAt(i).isUsed()) {
                Bang ba = new Bang();
                ba.setX(pbullets.elementAt(i).getX());
                ba.setY(pbullets.elementAt(i).getY());
                bang.add(ba);
          pbullets.elementAt(i).setUsed(true);
          Play.playBang();
            player2.setLife(player2.getLife()-1);
            score1 += 5;
            }

            else if (Check.C4(pbullets.elementAt(i), bonus1)
            && !pbullets.elementAt(i).isUsed()) {
                Bang ba = new Bang();
                ba.setX(pbullets.elementAt(i).getX());
                ba.setY(pbullets.elementAt(i).getY());
                bang.add(ba);
          pbullets.elementAt(i).setUsed(true);
          Play.playBang();
            bonus1.setX(-50);
            
            score1 += 15;
            p.setLocation(-50, y);
            }
            
            else if (Check.C4(pbullets.elementAt(i), bonus2)
            && !pbullets.elementAt(i).isUsed()) {
                Bang ba = new Bang();
                ba.setX(pbullets.elementAt(i).getX());
                ba.setY(pbullets.elementAt(i).getY());
                bang.add(ba);
          pbullets.elementAt(i).setUsed(true);
          Play.playBang();
            bonus2.setX(-50);
            
            score1 += 15;
            q.setLocation(-50, y);
            }
            
            else if (Check.C4(pbullets.elementAt(i), bonus3)
            && !pbullets.elementAt(i).isUsed()) {
                Bang ba = new Bang();
                ba.setX(pbullets.elementAt(i).getX());
                ba.setY(pbullets.elementAt(i).getY());
                bang.add(ba);
          pbullets.elementAt(i).setUsed(true);
          Play.playBang();
            bonus3.setX(-50);
            
            score1 += 15;
            r.setLocation(-50, y);
            }
            
            else if (pbullets.elementAt(i).getY() <= 30 || pbullets.elementAt(i).getY() >= 640 || pbullets.elementAt(i).getX() <= 30  || pbullets.elementAt(i).getX() >= 660) { // Delete if out of frame
        pbullets.remove(i);
      }
    }
  }
  

  
    public void EBulletMove() {
      
    for (int i = 0; i < ebullets.size();i++) {
            ebullets.elementAt(i).move(ang2);

            if (Check.C1(ebullets.elementAt(i), wall.elementAt(0))
            && !ebullets.elementAt(i).isUsed()) {
                Bang ba = new Bang();
                ba.setX(ebullets.elementAt(i).getX());
                ba.setY(ebullets.elementAt(i).getY());
                bang.add(ba);
          ebullets.elementAt(i).setUsed(true);
          Play.playBang();
            wall.elementAt(0).setX(-20);
            B.setLocation(-50, y);

        }
            else if (Check.C3(ebullets.elementAt(i), player1)
            && !ebullets.elementAt(i).isUsed()) {
                Bang ba = new Bang();
                ba.setX(ebullets.elementAt(i).getX());
                ba.setY(ebullets.elementAt(i).getY());
                bang.add(ba);
          ebullets.elementAt(i).setUsed(true);
          Play.playBang();
            player1.setLife(player1.getLife()-1);
            score2 += 5;
            }
            
            else if (Check.C4(ebullets.elementAt(i), bonus1)
            && !ebullets.elementAt(i).isUsed()) {
                Bang ba = new Bang();
                ba.setX(ebullets.elementAt(i).getX());
                ba.setY(ebullets.elementAt(i).getY());
                bang.add(ba);
          ebullets.elementAt(i).setUsed(true);
          Play.playBang();
            bonus1.setX(-50);
            
            score2 += 15;
            p.setLocation(-50, y);
            }
            
            else if (Check.C4(ebullets.elementAt(i), bonus2)
            && !ebullets.elementAt(i).isUsed()) {
                Bang ba = new Bang();
                ba.setX(ebullets.elementAt(i).getX());
                ba.setY(ebullets.elementAt(i).getY());
                bang.add(ba);
          ebullets.elementAt(i).setUsed(true);
          Play.playBang();
            bonus2.setX(-50);
            
            score2 += 15;
            q.setLocation(-50, y);
            }
            
            else if (Check.C4(ebullets.elementAt(i), bonus3)
            && !ebullets.elementAt(i).isUsed()) {
                Bang ba = new Bang();
                ba.setX(ebullets.elementAt(i).getX());
                ba.setY(ebullets.elementAt(i).getY());
                bang.add(ba);
          ebullets.elementAt(i).setUsed(true);
          Play.playBang();
            bonus3.setX(-50);
            
            score2 += 15;
            r.setLocation(-50, y);
            }
            
            else if (ebullets.elementAt(i).getY() <= 30 || ebullets.elementAt(i).getY() >= 640 || ebullets.elementAt(i).getX() <= 30  || ebullets.elementAt(i).getX() >= 660) { // Delete if out of frame
        ebullets.remove(i);
      }
    }
  }

      public void RemoveBang() {
    for (int i = 0; i < bangs.size(); i++) {
      if (bangs.elementAt(i).isBang()) { // Delete after explosion
        bangs.remove(i);
      }
      for (int j = 0; j < bang.size(); j++) {
      if (bang.elementAt(j).isBang()) { // Delete after explosion
        bang.remove(j);
      }
    }
  }}
      
        public void CheckLife() {
    if (player1.getLife() <= 0 || player2.getLife() <= 0 ) {
        int result = JOptionPane.showConfirmDialog(this, "You lose! Try Again?", "Attention",
          JOptionPane.YES_OPTION);
      if (result == 0) {
        reset();

      } else {
        System.exit(0);
      }
    }
  }

  public void drawInfo(Graphics g) {
    g.setColor(Color.green);
    g.fillRect(150, 20, player1.getLife(), 10);
    g.fillRect(150, 40, player2.getLife(), 10);
    g.drawString(String.format("%d", player1.getLife()), 250, 30);
    g.drawString(String.format("%d", player2.getLife()), 250, 50);
    info1 = "Score Player 1 " + score1 + " ";
    info2 = "Score Player 2 " + score2 + " ";
    g.drawString(info1, 20, 30);
    g.drawString(info2, 20, 50);
  }

    public void reset() {
    ebullets.clear();
    pbullets.clear();
    player1.setX(130);
    player1.setY(120);
    player1.setLife(100);
    player2.setX(530);
    player2.setY(510);
    player2.setLife(100);
    score1 = 0;
    score2 = 0;
    Player.up = false;
    Player.down = false;
    Player.left = false;
    Player.right = false;
    Enemy.high = false;
    Enemy.low = false;
    Enemy.lside = false;
    Enemy.rside = false;
    isFire = false;
    isShoot = false;
  }
    
  @Override
  public void mouseClicked(MouseEvent e) {
  }

  @Override
  public void mouseEntered(MouseEvent e) {
    // TODO Auto-generated method stub

  }

  @Override
  public void mouseExited(MouseEvent e) {
    // TODO Auto-generated method stub

  }

  @Override
  public void mousePressed(MouseEvent e) {
  }

  @Override
  public void mouseReleased(MouseEvent e) {
    
  }
  
}
